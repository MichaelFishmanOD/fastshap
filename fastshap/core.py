# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = []

# Cell
from fastai2.tabular.all import *

# Cell
import shap

# Cell
def _prepare_data(learn:Learner, test_data=None):
  "Prepares train and test data for `SHAP`, pass in a learner with optional data"
  dtype = ''
  if isinstance(test_data, pd.DataFrame): dtype = 'pandas'
  elif isinstance(test_data, TabDataLoader): dtype = 'dl'
  elif test_data is None: dtype = 'train'
  else: raise ValueError('Input is not supported. Please use either a `DataFrame` or `TabularDataLoader`')
  cols = learn.dls.cat_names + learn.dls.cont_names
  X_train_cat, X_train_cont, _ = learn.dls.one_batch()
  X_train = [X_train_cat, X_train_cont]
  X_train = pd.DataFrame(np.concatenate([v.to('cpu').numpy() for v in X_train], axis=1), columns=cols)
  if dtype == 'pandas':
    dl = learn.dls.test_dl(test_data)
  elif dtype=='dl':
    dl = test_data
  else:
    dl = learn.dls[1]
    if len(dl) * learn.dls.bs > 256:
      test_data = dl.dataset.all_cols.sample(256, replace=False)
      dl = learn.dls.test_dl(test_data)
  X_test = tensor(dl.cats).long(),tensor(dl.conts).float()
  X_test = pd.DataFrame(np.concatenate([v.to('cpu').numpy() for v in X_test], axis=1), columns=cols)
  return X_train, X_test

# Cell
def _predict(learn:TabularLearner, data:np.array):
  "Predict function for some data on a fastai model"
  device = 'cuda' if torch.cuda.is_available() else 'cpu'
  model = learn.model.to(device)
  dl = learn.dls[0]
  nb_cat_cols = len(dl.dataset.cat_names)
  nb_cont_cols = len(dl.dataset.cont_names)
  x_cat = torch.from_numpy(data[:, :nb_cat_cols]).to(device, torch.int64)
  x_cont = torch.from_numpy(data[:, -nb_cont_cols:]).to(device, torch.float32)
  with torch.no_grad():
    pred_probs = learn.model(x_cat, x_cont).cpu().numpy()
  return pred_probs