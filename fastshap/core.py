# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['prepare_data', 'BaseExplainer', 'KernelExplainer']

# Cell
from fastai2.tabular.all import *

# Cell
import shap

# Cell
def prepare_data(learn:Learner, test_dl:TabularDataLoaders=None):
  "Prepares train and test data for `SHAP`, pass in a learner with optional data"
  X_train_cat, X_train_cont, _ = learn.dls.one_batch()
  X_train = [X_train_cat, X_train_cont]
  X_test_cat, X_test_cont = tensor(test_dl.cats).long(),tensor(test_dl.conts).float()
  X_test = [X_test_cat, X_test_cont]
  cols = learn.dls.cat_names + learn.dls.cont_names
  X_train = pd.DataFrame(np.concatenate([v.to('cpu').numpy() for v in X_train], axis=1), columns=cols)
  X_test = pd.DataFrame(np.concatenate([v.to('cpu').numpy() for v in X_test], axis=1), columns=cols)
  return X_train, X_test

# Cell
class BaseExplainer():
  "Base class for writing series of `SHAP` explainers"
  def __init__(self, pred_func, learn:Learner, test_data:pd.DataFrame=None, test_dl:TabularDataLoaders=None):
    "Set up base class"
    self.pred_func = pred_func
    if test_dl is not None:
      self._dl = test_dl
    elif test_data is not None:
      self._dl = learn.dls.test_dl(test_data)
    else:
      self._dl = learn.dls[1]
    self._learn = learn
    self._train, self._test = prepare_data(self._learn, self._dl)

# Cell
class KernelExplainer(BaseExplainer):
  def __init__(self, pred_func, learn:Learner, test_data:pd.DataFrame=None, test_dl:TabularDataLoaders=None, l1_reg:bool=False):
    "Initialize KernelExplainer with a Learner and optional test data with l1 regularization"
    super().__init__(learn, test_data, test_dl)
    self._e = shap.KernelExplainer(pred_func, self._train)
    self._exp_val = self._e.expected_value
    self._shap_values = self._e.shap_values(self._test, l1_reg=l1_reg)

  def force_plot(self, l1_reg:bool=False, idx:int=0):
    "Allows comparison of various variable x variable inputs"
    shap.initjs()
    display(shap.force_plot(self._e.expected_value[idx], self._shap_values[idx], self._test))

  def summary_plot(self, plot_type:str='bar'):
    "Plots the average impact on a model a variable had after adjustment"
    shap.initjs()
    shap.summary_plot(self._shap_values, self._test, plot_type=plot_type)

  def dependance_plot(self, var:str="", idx:int=0):
    "Plots partial dependancy for a given variable"
    if var is "":
      raise ValueError("No variable passed for `var`")
    shap.initjs()
    shap.dependence_plot(var, self._shap_values[idx], self._test)

  def decision_plot(self, idx:int=0, logit:bool=False):
    "Plots decision model took to get to a particular value"
    link = 'logit' if logit else 'identity'
    shap.initjs()
    if isinstance(self._exp_val, np.ndarray):
      exp_val = self._exp_val[1]
    else:
      exp_val = self._exp_val
    shap.decision_plot(exp_val, self._shap_values[idx], self._test, link=link)

  def get_vals(self):
    "Return values needed for analysis if wanted"
    return self._e, self._shap_values, self._test, self._train